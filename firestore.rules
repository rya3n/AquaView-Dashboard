/**
 * @fileoverview Firestore Security Rules for Aqua Aqu√°rios.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by default, restricting access to all data unless explicitly allowed.
 * It uses a simple authenticated-only model for data access.
 *
 * Data Structure:
 * The database contains three top-level collections: `products`, `clients`, and `sales`.
 * Each document ID in these collections is assumed to be auto-generated by Firestore.
 *
 * Key Security Decisions:
 * - Products are publicly readable but require authentication to modify.
 * - Clients are only accessible to authenticated users.
 * - Sales are only accessible to authenticated users.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Products are publicly readable, but only authenticated users can create, update, or delete them.
     * @path /products/{productId}
     * @allow (get, list): Any user can read product information.
     * @allow (create): Only authenticated users can create new products.
     * @allow (update, delete): Only authenticated users can update or delete products.
     * @deny (create): Unauthenticated users cannot create products.
     * @deny (update, delete): Unauthenticated users cannot update or delete products.
     * @principle Allows public read access to product information while restricting modifications to authenticated users.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Clients can only be accessed by authenticated users.
     * @path /clients/{clientId}
     * @allow (get, list): Only authenticated users can read client information.
     * @allow (create): Only authenticated users can create new client profiles.
     * @allow (update, delete): Only authenticated users can update or delete client profiles.
     * @deny (create): Unauthenticated users cannot create clients.
     * @deny (get, list): Unauthenticated users cannot list clients.
     * @deny (update, delete): Unauthenticated users cannot update or delete clients.
     * @principle Enforces authenticated-only access to client data.
     */
    match /clients/{clientId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Sales can only be accessed by authenticated users.
     * @path /sales/{saleId}
     * @allow (get, list): Only authenticated users can read sale information.
     * @allow (create): Only authenticated users can create new sale records.
     * @allow (update, delete): Only authenticated users can update or delete sale records.
     * @deny (create): Unauthenticated users cannot create sales.
     * @deny (get, list): Unauthenticated users cannot list sales.
     * @deny (update, delete): Unauthenticated users cannot update or delete sales.
     * @principle Enforces authenticated-only access to sales data.
     */
    match /sales/{saleId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    // Helper function to determine if a user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }
  }
}